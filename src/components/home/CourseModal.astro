---
import type { Course } from "../../types/schedule";
---

<div id="courseModal" class="modal">
  <div id="modalContent" class="modal-content">
    <div class="modal-close-container">
      <span class="close">&times;</span>
    </div>
    <img id="modalPersonImage" src="" alt="Speaker" class="modal-person-image" style="display: none;" />
    <h2 id="modalTitle" class="emfont-NotoSansTC-600"></h2>
    <h3 id="modalSubtitle" class="emfont-NotoSansTC-600"></h3>
    <div class="section-title emfont-NotoSansTC-600">課程介紹</div>
    <div class="description-container">
      <p id="modalDescription" class="emfont-NotoSansTC-600"></p>
    </div>
    <div class="section-title emfont-NotoSansTC-600" id="speakerSectionTitle">講者介紹</div>
    <div class="description-container">
      <p id="speakerDescription" class="emfont-NotoSansTC-600"></p>
    </div>
    <div id="modalLinks" class="modal-links emfont-NotoSansTC-500"></div>
    <button class="close-button">Close</button>
  </div>
</div>

<style>
  /* Modal styles (as previously defined) */
  .modal {
    display: none;
    position: fixed !important;
    inset: 0 !important;
    z-index: 9999999 !important;
    width: 100vw;
    height: 100dvh;
    overflow: auto;
    background-color: transparent;
    backdrop-filter: blur(0px);
    isolation: isolate;
    align-items: flex-start;
    justify-content: center;
    padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
    transition: .3s ease-out;
  }

  .modal-content {
    background-color: #028fdb;
    color: #efefef;
    padding: 3rem;
    border-radius: 8px;
    max-width: 800px;
    width: 90%;
    position: relative !important;
    margin: auto;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    max-height: 96dvh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    transform: scale(0);
    transition: transform .3s cubic-bezier(.5, 1, .1, 1.20);
  }

  .modal-close-container {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 9999;
  }

  .close {
    position: relative;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
  }

  .close:hover {
    color: #ff4d4f;
  }

  .close:active {
    transform: scale(0.9);
  }

  #modalTitle {
    margin-top: 0;
    margin-bottom: 0.5rem;
    font-size: 2.2rem;
    font-weight: 600;
    color: #E0E0E0;
    text-align: left;
    margin-right: 10px;
    padding-right: 100px;
    position: relative;

  }

  #modalSubtitle {
    margin-top: 0;
    margin-bottom: 2.5rem;
    font-size: 1.2rem;
    color: #EAB99F;
    text-align: left;
  }

  .modal-info {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem 2rem;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #a2a2a2;
  }

  .info-item {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    font-size: 1rem;
    color: #d0d0d0;
  }

  .info-item .icon {
    width: 20px;
    height: 20px;
    color: #c9a845;
  }

  .description-container {
    margin-bottom: 2rem;
    text-align: left;
    padding-top: 0.5rem;
  }

  #modalDescription {
    line-height: 1.8;
    font-size: 1rem;
  }

  .description-text {
    line-height: 1.8;
    font-size: 1rem;
    color: #efefef;
  }

  .modal-links {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 2rem;
    justify-content: center;
  }

  .modal-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.6rem;
    padding: 0.85rem 1.4rem;
    background-color: #1e1e1e;
    border: 1px solid #a2a2a2;
    border-radius: 8px;
    text-decoration: none;
    color: #fff;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s ease;
    min-width: 120px;
    max-width: 200px;
    letter-spacing: 0.02em;
  }

  .modal-link:hover {
    background-color: #2a2a2a;
    transform: translateY(-2px);
    border-color: #444;
  }

  .modal-link:active {
    transform: translateY(0);
  }

  .modal-link .icon {
    width: 18px;
    height: 18px;
    color: #c9a845;
  }

  .modal-link-button {
    background-color: #c9a845;
    border: none;
    padding: 0.85rem 1.6rem;
    font-size: 1.05rem;
    font-weight: 600;
    position: relative;
    overflow: hidden;
    z-index: 1;
    min-width: 140px;
    max-width: 220px;
  }

  .modal-link-button:hover {
    background-color: #d8b754;
    transform: translateY(-2px);
  }

  .modal-link-button .icon {
    color: #fff;
  }

  .close-button {
    display: block;
    width: 140px;
    margin: 2rem auto 0;
    padding: 0.8rem 1.5rem;
    background-color: #f0f0f0;
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: black;
    font-size: 1rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    z-index: 10;
    overflow: hidden;
  }

  .close-button:hover {
    scale: 110%;
  }

  .close-button:hover::before {
    transform: scaleX(1);
    transform-origin: left;
  }

  .close-button:active {
    transform: scale(0.95);
  }

  .section-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #E0E0E0;
    margin-bottom: 1rem;
    margin-top: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #a2a2a2;
  }

  .modal-person-image {
    position: absolute;
    top: 1.5rem;
    right: 3.5rem;
    width: 90px;
    height: 90px;
    border-radius: 50%;
    object-fit: cover;
    z-index: 5;
  }

  @media (max-width: 600px) {
    .modal {
      padding: 0;
      align-items: center;
    }

    .modal-content {
      padding: 1.5rem;
      width: 90%;
      max-height: 90dvh;
      overflow-y: auto;
      border-radius: 12px;
      margin: 0 0 env(safe-area-inset-bottom, 20px);
    }

    .modal-content {
      -webkit-overflow-scrolling: touch;
      overscroll-behavior-y: contain;
      padding-bottom: calc(1.5rem + env(safe-area-inset-bottom, 20px));
    }

    #modalTitle {
      font-size: 1.5rem;
      padding-right: 0;
    }

    #modalSubtitle {
      font-size: 1rem;
      margin-bottom: 1.5rem;
    }

    .modal-person-image {
      display: none;
    }

    .modal-info {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.8rem;
    }

    .info-item {
      font-size: 0.9rem;
    }

    #modalDescription {
      font-size: 0.9rem;
    }

    .modal-link {
      font-size: 0.85rem;
      padding: 0.5rem 0.8rem;
    }

    .modal-link-button {
      padding: 0.5rem 1rem;
    }

    .modal-close-container {
      top: 0.5rem;
      right: 0.5rem;
    }

    .close {
      width: 32px;
      height: 32px;
    }

    .close::before,
    .close::after {
      width: 16px;
    }

    .close-button {
      width: 120px;
      padding: 0.6rem 1.2rem;
      font-size: 0.9rem;
    }

    .close-button:hover {
      scale: unset;
    }
  }
</style>

<style is:global>
  #speakerDescription .speaker-name {
    font-size: 1.618rem !important;
    font-weight: 600;
    color: #efefef;
    margin-bottom: 0.5rem;
    display: flex !important;
    place-items: center;
    gap: 0.75rem !important;
  }

  #speakerDescription .speaker-inline-image {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
    flex-shrink: 0;
  }

  /* Styling for markdown elements in speaker descriptions */
  #speakerDescription p {
    margin-bottom: 1rem;
    line-height: 1.6;
  }

  #speakerDescription a {
    color: #DAFF55;
    text-decoration: none;
    border-bottom: 1px dotted #DAFF55;
    transition: all 0.2s ease;
  }

  #speakerDescription a:hover {
    color: #DAFF55;
    border-bottom-color: #DAFF55;
  }

  #speakerDescription strong {
    color: #fff;
    font-weight: 600;
  }

  #speakerDescription em {
    color: #d0d0d0;
    font-style: italic;
  }

  #speakerDescription ul, #speakerDescription ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  #speakerDescription li {
    margin-bottom: 0.5rem;
  }

  #speakerDescription code {
    background-color: rgba(0, 0, 0, 0.2);
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-family: monospace;
    font-size: 0.9em;
  }

  #speakerDescription blockquote {
    border-left: 3px solid #EAB99F;
    padding-left: 1rem;
    margin-left: 0;
    color: #d0d0d0;
    font-style: italic;
  }

  #speakerDescription h1{
    font-size: 1.5rem;
    font-weight: bold;
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
    color: #E0E0E0;
  }
</style>

<script>
  import scheduleData from "../../assets/data/schedule.json"; // Full schedule data
  import { formatCourseTime } from "../../utils/schedule"; // Utility function
  import { marked } from 'marked';

  // Configure marked to open links in new tab
  marked.use({
    renderer: {
      link({ tokens, href, text }) {
        return `<a href="${href}" target="_blank" rel="noopener noreferrer">${text}</a>`;
      }
    }
  });

  // Function to render markdown content
  function renderMarkdown(text) {
    if (!text) return '';
    return marked.parse(text);
  }

  document.addEventListener("astro:page-load", () => {
    const modalElement = document.getElementById("courseModal");
    const modalContent = document.getElementById("modalContent");
    const closeBtnElement = modalElement?.querySelector(".close");
    const closeButtonBottomElement = modalElement?.querySelector(".close-button");

    // Listener for course cells is now on the parent (Schedule.astro) 
    // and will dispatch a custom event to open the modal.
    // We listen for that custom event here.

    if (!modalElement) {
      console.error("CourseModal element not found.");
      return;
    }

    // Ensure modal is appended to body to avoid z-index issues with other page elements
    // This is important if the <CourseModal /> tag is not at the root of the body in the final DOM
    if (modalElement.parentElement !== document.body) {
      document.body.appendChild(modalElement);
    }

    marked.use({
      renderer: {
        link({ tokens, href, text }) {
          return `<a href="${href}" target="_blank" rel="noopener noreferrer" class="emfont-NotoSansTC-400">${text}</a>`;
        }
      }
    });

    emfont.init({
      forceMin: true,
      root: modalElement,
      cache: false,
    });

    const displayModalContent = (course) => {
      if (!modalElement || !course) return;

      const modalTitleEl = modalElement.querySelector("#modalTitle");
      const modalSubtitleEl = modalElement.querySelector("#modalSubtitle");
      const modalDescriptionEl = modalElement.querySelector("#modalDescription");
      const linksContainerEl = modalElement.querySelector("#modalLinks");
      const speakerSectionTitleEl = modalElement.querySelector("#speakerSectionTitle");
      const speakerDescriptionEl = modalElement.querySelector("#speakerDescription");
      const modalPersonImageEl = modalElement.querySelector("#modalPersonImage");

      if (modalTitleEl) modalTitleEl.textContent = course.title_zh?.split("\n")[0] || "";
      if (modalSubtitleEl) modalSubtitleEl.textContent = course.title_zh?.split("\n")[1] || "";

      // Hide speaker section entirely for Game type events
      if (course.type === "Game") {
        if (speakerSectionTitleEl) speakerSectionTitleEl.style.display = "none";
        if (speakerDescriptionEl) speakerDescriptionEl.style.display = "none";
        if (modalPersonImageEl) modalPersonImageEl.style.display = "none";
      } else {
        // Show speaker section for non-Game events
        if (speakerSectionTitleEl) speakerSectionTitleEl.style.display = "block";
        if (speakerDescriptionEl) speakerDescriptionEl.style.display = "block";

        // Get speaker data
        const speakers = [
          { name: course.speaker1, id: course.speaker1id, desc: course.speaker1Desc },
          { name: course.speaker2, id: course.speaker2id, desc: course.speaker2Desc },
          { name: course.speaker3, id: course.speaker3id, desc: course.speaker3Desc },
          { name: course.speaker4, id: course.speaker4id, desc: course.speaker4Desc },
          { name: course.speaker5, id: course.speaker5id, desc: course.speaker5Desc }
        ].filter(speaker => speaker.name && speaker.name.trim() !== "");

        const speakerText = speakers.map(speaker => speaker.name).join("、");

        if (speakerSectionTitleEl) {
          speakerSectionTitleEl.textContent = "講者介紹";
        }

        // Handle speaker images and descriptions
        if (speakerDescriptionEl) {
          const speakersWithDesc = speakers.filter(speaker => speaker.desc && speaker.desc.trim() !== "");

          if (speakers.length === 1) {
            // Single speaker - show image in top-right position
            const speaker = speakers[0];
            if (modalPersonImageEl && speaker.id) {
              modalPersonImageEl.src = `/2025/speakers/${speaker.id}.webp`;
              modalPersonImageEl.style.display = "block";
              modalPersonImageEl.onerror = () => {
                modalPersonImageEl.style.display = "none";
              };
            }

            // Show speaker description without inline image
            if (speakersWithDesc.length > 0) {
              speakerDescriptionEl.innerHTML = `<div class="speaker-name emfont-NotoSansTC-600">${speakersWithDesc[0].name}</div>${renderMarkdown(speakersWithDesc[0].desc)}`;
            } else if (speakerText) {
              speakerDescriptionEl.innerHTML = `<div class="speaker-name emfont-NotoSansTC-600">${speaker.name}</div>${speakerText}是本課程的講師。<br>其他資訊可能得等你自己通靈`;
            }
          } else if (speakers.length > 1) {
            // Multiple speakers - hide top image and show inline images
            if (modalPersonImageEl) {
              modalPersonImageEl.style.display = "none";
            }

            if (speakersWithDesc.length > 0) {
              speakerDescriptionEl.innerHTML = speakersWithDesc.map(speaker => {
                const imageHtml = speaker.id ? `<img src="/2025/speakers/${speaker.id}.webp" alt="${speaker.name}" class="speaker-inline-image" onerror="this.style.display='none';">` : "";
                return `<div class="speaker-name emfont-NotoSansTC-600">${imageHtml}<span>${speaker.name}</span></div>${renderMarkdown(speaker.desc)}`;
              }).join("");
            } else if (speakerText) {
              speakerDescriptionEl.innerHTML = speakers.map(speaker => {
                const imageHtml = speaker.id ? `<img src="/2025/speakers/${speaker.id}.webp" alt="${speaker.name}" class="speaker-inline-image" onerror="this.style.display='none';">` : "";
                return `<div class="speaker-name emfont-NotoSansTC-600">${imageHtml}<span>${speaker.name}</span></div>`;
              }).join("") + `<p>${speakerText}是本課程的講師。<br>其他資訊可能得等你自己通靈</p>`;
            }
          } else {
            // No speakers
            if (modalPersonImageEl) {
              modalPersonImageEl.style.display = "none";
            }
            speakerDescriptionEl.innerHTML = "無講者資訊";
          }
          speakerDescriptionEl.classList.add("description-text");
        }
      }

      if (modalDescriptionEl) {
        modalDescriptionEl.innerHTML = course.description_zh?.replace(/\n/g, "<br>") || "暫無課程介紹";
      }

      if (linksContainerEl) {
        linksContainerEl.innerHTML = "";
        if (course.slide) {
          const slideBtn = document.createElement("a");
          slideBtn.href = course.slide;
          slideBtn.target = "_blank";
          slideBtn.className = "modal-link modal-link-button";
          slideBtn.textContent = "課程簡報";
          linksContainerEl.appendChild(slideBtn);
        }
        if (course.co_write) {
          const coWriteBtn = document.createElement("a");
          coWriteBtn.href = course.co_write;
          coWriteBtn.target = "_blank";
          coWriteBtn.className = "modal-link";
          coWriteBtn.textContent = "共筆";
          linksContainerEl.appendChild(coWriteBtn);
        }
        if (course.record) {
          const recordBtn = document.createElement("a");
          recordBtn.href = course.record;
          recordBtn.target = "_blank";
          recordBtn.className = "modal-link";
          recordBtn.textContent = "錄影";
          linksContainerEl.appendChild(recordBtn);
        }
      }

      emfont.init({
        forceMin: true,
        root: modalElement,
        cache: false,
      });
      console.log("opened");
    };

    const openModalWithCourseId = (courseId) => {
      const course = scheduleData.find(c => String(c.id) === String(courseId));
      if (course) {
        displayModalContent(course);
        modalElement.style.display = "flex";
        document.body.style.overflow = "hidden";
        setTimeout(() => {
          modalElement.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
          modalElement.style.backdropFilter = "blur(5px)";
          modalContent.style.transform = "scale(1)";
        }, 100);
      } else {
        console.error(`Course with ID ${courseId} not found.`);
      }
    };

    const closeModal = () => {
      if (modalElement) {
        modalContent.style.transform = "scale(0)";
        modalElement.style.backdropFilter = "blur(0px)";
        modalContent.style.transition = "transform .3s cubic-bezier(.5, 1, 0, 1)";
        modalElement.style.backgroundColor = "transparent";
        setTimeout(() => {
          modalElement.style.display = "none";
          modalContent.style.transition = "transform .3s cubic-bezier(.5, 1, .1, 1.20)";
        }, 300);
        document.body.style.overflow = "";
      }
    };

    // Listen for a custom event to open the modal
    document.addEventListener("openCourseModal", (event: Event) => {
      const customEvent = event as CustomEvent;
      const courseId = customEvent.detail?.courseId;
      if (courseId) {
        openModalWithCourseId(courseId);
      }
    });

    if (closeBtnElement) closeBtnElement.addEventListener("click", closeModal);
    if (closeButtonBottomElement) closeButtonBottomElement.addEventListener("click", closeModal);

    window.addEventListener("click", (event) => {
      if (event.target === modalElement) closeModal();
    });

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && modalElement.style.display === "flex") closeModal();
    });
  });
</script>
