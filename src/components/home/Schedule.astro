---
import { getLocale } from "../../i18n";
import { Icon } from "astro-icon/components";
import scheduleData from "../../assets/data/schedule.json";
import person from "../../assets/img/modal/image-11.png";

const t = getLocale(Astro.url);

// Day mapping for rooms
const dayMap = {
  "Day1": "1",
  "Day2": "2",
  "Day3": "3",
  "Day4": "4",
  "Day5": "5",
};

const dayKeys = Object.keys(dayMap);

// Group courses by day
const coursesByDay = {};
dayKeys.forEach(dayKey => {
  // Convert course dates to local timezone for comparison
  coursesByDay[dayKey] = scheduleData.filter(course => course.room === dayKey);
});

// Track cells that should be skipped due to rowspan
const cellCoverage = {};
dayKeys.forEach(dayKey => {
  cellCoverage[dayKey] = {};
});

// Prepare headers dynamically with fixed dates
const dynamicDayHeaders = [
  { dayNum: "1", dateText: "7/9 三" },
  { dayNum: "2", dateText: "7/10 四" },
  { dayNum: "3", dateText: "7/11 五" },
  { dayNum: "4", dateText: "7/12 六" },
  { dayNum: "5", dateText: "7/13 日" },
];

// Time slots for rows (更新時間槽，包含所有可能的時間)
const timeSlots = [
  "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30",
  "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30",
  "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30",
  "20:00", "20:30", "21:00",
];

// Helper function to get a course starting at a given time slot for a specific day
function getCourseStartingAt(dayKey, timeSlot) {
  const coursesForDay = coursesByDay[dayKey] || [];
  const normalizedTimeSlot = timeSlot;

  return coursesForDay.find(course => {
    if (!course.start) return false;

    const courseTime = new Date(course.start.toLocaleString("en-US", { timeZone: "Asia/Taipei" }));

    const courseTimeString = courseTime.toLocaleTimeString("zh-TW", {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
    });

    return courseTimeString === normalizedTimeSlot;
  });
}

// Calculate duration in slots
function calculateDurationInSlots(course) {
  if (!course.start || !course.end) return console.error(`Undefined course start or end ${course.id}`);

  const start = new Date(course.start);
  const end = new Date(course.end);

  return Math.ceil((end - start) / (1000 * 60 * 30));
}
---
<section class="container" id="schedule">
  <h2 class="emfont-UnboundedSans">{t.components.home.schedulePreview.title}</h2>

  <div class="schedule-table">
    <div class="table-container">
      <table>
        <thead>
        <tr>
          <th></th>
          {dynamicDayHeaders.map(header => (
            <th>
              <div class="day-header">Day {header.dayNum}</div>
              <div class="date-header">{header.dateText}</div>
            </th>
          ))}
        </tr>
        </thead>
        <tbody>
        {timeSlots.map((timeSlot, timeIndex) => {
          return (
            <tr>
              <td class="time-cell">{timeSlot}</td>
              {Object.keys(dayMap).map(dayKey => {
                if (cellCoverage[dayKey][timeSlot]) {
                  return null;
                }

                const course = getCourseStartingAt(dayKey, timeSlot);
                if (course) {
                  const rowspan = calculateDurationInSlots(course);
                  // Mark future slots as covered

                  if (rowspan > 1) {
                    for (let i = 1; i < rowspan; i++) {
                      const futureSlotIndex = timeIndex + i;
                      if (futureSlotIndex < timeSlots.length) {
                        const futureTimeSlot = timeSlots[futureSlotIndex];
                        cellCoverage[dayKey][futureTimeSlot] = true;
                      }
                    }
                  }

                  const isMeal = course.title_zh === "午餐" || course.title_zh === "晚餐";
                  const hasDetails = course.description_zh || course.slide || course.co_write || course.record || course.speaker1;

                  if (isMeal) {
                    return (
                      <td class="event-break-cell" rowspan={rowspan}>
                        {course.title_zh}
                      </td>
                    );
                  }

                  // If the course ID is null, generate a stable ID based on title and time

                  const courseId = course.id ? String(course.id) :
                    `course_${course.title_zh?.replace(/\s+/g, "_")}_${timeSlot.replace(":", "_")}`;

                  return (
                    <td class={`course-cell type-${course.type?.toLowerCase() || "default"}`}
                        data-course-id={hasDetails ? courseId : null}
                        rowspan={rowspan}>
                      <div class="course-title">{course.title_zh?.split("\n")[0] || ""}</div>
                      {course.title_zh?.split("\n")[1] && (
                        <div class="course-subtitle">{course.title_zh.split("\n")[1]}</div>
                      )}
                      {hasDetails && (
                        <div class="info-icon">
                          <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 20 20"
                               fill="none">
                            <path d="M9.89673 9.10425V13.3696" stroke="#201814" stroke-width="2" stroke-linecap="round"
                                  stroke-linejoin="round" />
                            <path d="M9.89673 5.70126L9.90604 5.69092" stroke="#201814" stroke-width="2"
                                  stroke-linecap="round" stroke-linejoin="round" />
                            <path
                              d="M9.89665 18.0614C14.608 18.0614 18.4273 14.242 18.4273 9.53068C18.4273 4.81931 14.608 1 9.89665 1C5.18528 1 1.36597 4.81931 1.36597 9.53068C1.36597 14.242 5.18528 18.0614 9.89665 18.0614Z"
                              stroke="#201814" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                          </svg>
                        </div>
                      )}
                    </td>
                  );
                }

                return (
                  <td class="empty-cell"></td>);
              })}
            </tr>
          );
        })}
        </tbody>
      </table>
    </div>
  </div>
</section>

<!-- Course Detail Modal -->
<div id="courseModal" class="modal">
  <div class="modal-content">
    <!-- Move close button outside other content for better z-index handling -->
    <div class="modal-close-container">
      <span class="close">&times;</span>
    </div>

    <img src={person.src} alt="Person" class="modal-person-image" />
    <h2 id="modalTitle"></h2>
    <h3 id="modalSubtitle"></h3>

    <div class="section-title">課程介紹</div>
    <div class="description-container">
      <p id="modalDescription"></p>
    </div>

    <div class="section-title" id="speakerSectionTitle">講者介紹</div>
    <div class="description-container">
      <p id="speakerDescription"></p>
    </div>

    <div id="modalLinks" class="modal-links">
      {/* Links will be populated here */}
    </div>

    <button class="close-button">Close</button>
  </div>
</div>

<style>
  .container {
    padding: 2rem 0;
    text-align: center;
    max-width: 1200px;
    margin: 0 auto;
  }

  .schedule-table {
    overflow-x: auto; /* Allows horizontal scrolling for smaller screens */
    margin: 2rem 0;
    padding: 1rem;
  }

  .table-container {
    min-width: 900px;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
    font-size: 1.25rem;
    table-layout: fixed;
  }

  th, td {
    border: 1px solid #ccc;
    padding: 0.5rem;
    text-align: center;
    overflow: hidden;
    text-overflow: ellipsis;
    box-sizing: border-box;
  }

  th:first-child, td:first-child { /* Time column */
    width: 80px;
    min-width: 80px;
    padding: 0.5rem 0.25rem;
  }

  /* Style for day columns to be equally sized */
  th:not(:first-child), td:not(:first-child) {
    width: calc((100% - 80px) / 5);
    padding: 0.5rem;
  }

  thead th {
    background-color: #f0f0f0; /* Light gray for header */
    position: sticky;
    top: 0; /* Stick to top on scroll */
    z-index: 2; /* Reduced z-index to prevent overlap with navbar */
    font-weight: bold;
  }

  .day-header {
    font-size: 1.1rem; /* Slightly smaller */
    font-weight: bold;
    color: #201814; /* Changed color */
  }

  .date-header {
    font-size: 0.85rem; /* Slightly smaller */
    color: #000; /* Changed color */
  }

  .time-cell {
    font-weight: bold;
    background-color: #f0f0f0;
    position: sticky;
    left: 0;
    z-index: 5;
    color: #201814;
    vertical-align: middle;
    font-size: 0.9rem !important;
    white-space: nowrap;
    padding: 0.5rem 0.25rem;
  }

  .course-cell {
    background-color: #e9ecef; /* Changed default background to light gray */
    transition: all 0.2s ease-in-out;
    padding: 0.4rem; /* Reduced padding to help content fit fixed height */
    position: relative; /* Added for positioning info icon */
  }

  /* Only apply cursor pointer to cells with data-course-id that is not null */
  .course-cell[data-course-id]:not([data-course-id="null"]) {
    cursor: pointer;
  }

  .course-cell[data-course-id]:not([data-course-id="null"]):hover {
    background-color: #d8dcdf; /* Darker hover for new base color */
    transform: translateY(-2px); /* Subtle lift effect */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Type-specific colors, ensure these class names match lowercase 'type' from JSON */
  .course-cell.type-main {
    background-color: #e9ecef;
  }

  /* Uniform light gray */
  .course-cell.type-broad {
    background-color: #e9ecef;
  }

  /* Uniform light gray */
  .course-cell.type-hackathon {
    background-color: #e9ecef;
  }

  /* Uniform light gray */
  .course-cell.type-game {
    background-color: #e9ecef;
  }

  /* Uniform light gray */
  .course-cell.type-community {
    background-color: #e9ecef;
  }

  /* Uniform light gray */
  .course-cell.type-other {
    background-color: #e9ecef;
  }

  /* Uniform light gray */
  .course-cell.type-default {
    background-color: #e9ecef;
  }

  /* Uniform light gray */


  .course-title {
    font-weight: 600;
    font-size: max(1vw, 0.9rem);
    margin-bottom: 0.3rem;
    color: #222;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }

  .course-cell.type-main .course-title,
  .course-cell.type-broad .course-title,
  .course-cell.type-hackathon .course-title,
  .course-cell.type-game .course-title,
  .course-cell.type-community .course-title,
  .course-cell.type-other .course-title {
    color: #222;
  }

  .course-subtitle {
    font-size: max(0.85vw, 0.75rem);
    color: #333;
    margin-bottom: 0.3rem;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }

  .course-speaker {
    font-size: 0.75em;
    color: #555;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
    margin-top: 0.2rem;
  }

  .course-speaker .icon { /* If Icon component renders an svg inside a span or div */
    width: 14px;
    height: 14px;
  }

  .info-icon {
    position: absolute;
    bottom: 10px; /* Adjusted for smaller icon */
    right: 3px; /* Adjusted for smaller icon */
    width: 10px; /* Halved size */
    height: 10px; /* Halved size */
  }

  .empty-cell {
    background-color: #ffffff; /* Plain white for empty */
  }

  .event-break-cell {
    background-color: #6c757d;
    color: white;
    font-weight: bold;
    vertical-align: middle;
    cursor: default; /* Remove pointer cursor for meal cells */
  }

  /* Modal styles - with important flags and highest possible z-index */
  .modal {
    display: none;
    position: fixed !important;
    inset: 0 !important;
    z-index: 2147483647 !important;
    width: 100vw !important;
    height: 100dvh !important; /* Dynamic viewport height */
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    isolation: isolate;
    align-items: flex-start;
    justify-content: center;
    padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
  }

  .modal-content {
    background-color: #000;
    color: #fff;
    padding: 1.5rem 3rem 3rem;
    border-radius: 8px;
    max-width: 800px;
    width: 90%;
    position: relative !important;
    margin: 2vh auto;
    border-left: 4px solid #c9a845;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    max-height: 96dvh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }

  /* Special container for close button to ensure it's at the top layer */
  .modal-close-container {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 9999;
  }

  .close {
    position: relative;
    width: 40px;
    height: 40px;
    cursor: pointer;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
  }

  .close::before,
  .close::after {
    content: '';
    position: absolute;
    width: 20px;
    height: 2px;
    background-color: #fff;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .close::before {
    transform: rotate(45deg);
  }

  .close::after {
    transform: rotate(-45deg);
  }

  .close:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.3);
    transform: rotate(180deg);
  }

  .close:hover::before,
  .close:hover::after {
    background-color: #c9a845;
  }

  .close:active {
    transform: rotate(180deg) scale(0.9);
  }

  #modalTitle {
    margin-top: 0;
    margin-bottom: 0.5rem;
    font-size: 2.2rem;
    font-weight: 600;
    color: #E0E0E0;
    text-align: left;
    margin-right: 10px;
    padding-right: 100px;
    position: relative;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }

  #modalSubtitle {
    margin-top: 0;
    margin-bottom: 2.5rem;
    font-size: 1.2rem;
    color: #EAB99F;
    text-align: left;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }

  .modal-info {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem 2rem;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #333;
  }

  .info-item {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    font-size: 1rem;
    color: #d0d0d0;
  }

  .info-item .icon {
    width: 20px;
    height: 20px;
    color: #c9a845;
  }

  .description-container {
    margin-bottom: 2rem;
    text-align: left;
    padding-top: 0.5rem;
  }

  #modalDescription {
    line-height: 1.8;
    font-size: 1rem;
    color: #c0c0c0;
  }

  .description-text {
    line-height: 1.8;
    font-size: 1rem;
    color: #c0c0c0;
  }

  .modal-links {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 2rem;
    justify-content: center;
  }

  .modal-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.6rem;
    padding: 0.85rem 1.4rem;
    background-color: #1e1e1e;
    border: 1px solid #333;
    border-radius: 8px;
    text-decoration: none;
    color: #fff;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s ease;
    min-width: 120px;
    max-width: 200px;
    letter-spacing: 0.02em;
  }

  .modal-link:hover {
    background-color: #2a2a2a;
    transform: translateY(-2px);
    border-color: #444;
  }

  .modal-link:active {
    transform: translateY(0);
  }

  .modal-link .icon {
    width: 18px;
    height: 18px;
    color: #c9a845;
  }

  .modal-link-button {
    background-color: #c9a845;
    border: none;
    color: #000;
    padding: 0.85rem 1.6rem;
    font-size: 1.05rem;
    font-weight: 600;
    position: relative;
    overflow: hidden;
    z-index: 1;
    min-width: 140px;
    max-width: 220px;
  }

  .modal-link-button:hover {
    background-color: #d8b754;
    transform: translateY(-2px);
  }

  .modal-link-button .icon {
    color: #000;
  }

  /* Bottom close button styles */
  .close-button {
    display: block;
    width: 140px;
    margin: 2rem auto 0;
    padding: 0.8rem 1.5rem;
    background-color: transparent;
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: #fff;
    font-size: 1rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    z-index: 10;
    overflow: hidden;
  }

  .close-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #c9a845;
    transform: scaleX(0);
    transform-origin: right;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: -1;
  }

  .close-button:hover {
    border-color: #c9a845;
    color: #000;
  }

  .close-button:hover::before {
    transform: scaleX(1);
    transform-origin: left;
  }

  .close-button:active {
    transform: scale(0.95);
  }

  @media (max-width: 900px) {
    /* .table-container will already enable scroll due to min-width */
  }

  @media (max-width: 600px) {
    .modal {
      padding: 0;
      align-items: center;
    }

    .modal-content {
      padding: 1.5rem;
      width: 90%;
      max-height: 90dvh;
      overflow-y: auto;
      border-radius: 12px;
      /* Add padding for bottom bar */
      margin: 0 0 env(safe-area-inset-bottom, 20px);
    }

    /* Add smooth scrolling for iOS */
    .modal-content {
      -webkit-overflow-scrolling: touch;
      overscroll-behavior-y: contain;
      /* Prevent content from being cut off at the bottom */
      padding-bottom: calc(1.5rem + env(safe-area-inset-bottom, 20px));
    }

    #modalTitle {
      font-size: 1.5rem;
      padding-right: 0; /* Remove padding as person image is hidden */
    }

    #modalSubtitle {
      font-size: 1rem;
      margin-bottom: 1.5rem;
    }

    .modal-person-image {
      display: none; /* Hide person image on mobile */
    }

    .modal-info {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.8rem;
    }

    .info-item {
      font-size: 0.9rem;
    }

    #modalDescription {
      font-size: 0.9rem;
    }

    .modal-link {
      font-size: 0.85rem;
      padding: 0.5rem 0.8rem;
    }

    .modal-link-button {
      padding: 0.5rem 1rem;
    }

    .modal-close-container {
      top: 0.5rem;
      right: 0.5rem;
    }

    .close {
      width: 32px;
      height: 32px;
    }

    .close::before,
    .close::after {
      width: 16px;
    }

    .close-button {
      width: 120px;
      padding: 0.6rem 1.2rem;
      font-size: 0.9rem;
    }
  }

  .section-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #E0E0E0;
    margin-bottom: 1rem;
    margin-top: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #333;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }


  .modal-person-image {
    position: absolute;
    top: 1.5rem;
    right: 3.5rem;
    width: 90px;
    height: 90px;
    border-radius: 50%;
    object-fit: cover;
    z-index: 5;
  }

  @media (max-width: 768px) {
    body {
      font-size: max(3.5vw, 1rem);
    }

    table {
      font-size: max(0.9rem, 3vw);
    }

    th:first-child, td:first-child {
      width: 70px;
      min-width: 70px;
      padding: 0.5rem 0.15rem;
    }

    .time-cell {
      padding: 0.5rem 0.15rem;
      font-size: 0.9rem !important;
    }

    th:not(:first-child), td:not(:first-child) {
      width: calc((100% - 70px) / 5);
      font-size: max(0.9rem, 3vw);
    }

    td.course-cell {
      font-size: max(0.9rem, 3vw);
    }

    .course-cell .course-title {
      font-size: max(0.9rem, 3vw);
      margin-bottom: 0.2rem;
    }

    .course-cell .course-subtitle {
      font-size: max(0.75rem, 2.5vw);
      margin-bottom: 0.2rem;
    }

    .event-break-cell {
      font-size: max(0.9rem, 3vw);
    }
  }
</style>

<script>
  import data from "../../assets/data/schedule.json";

  document.addEventListener("astro:page-load", () => {
    // Find the modal and move it to body
    const modalElement = document.getElementById("courseModal");
    if (modalElement) {
      // Move modal to body to avoid z-index issues
      document.body.appendChild(modalElement);
    }

    const courseElements = document.querySelectorAll(".course-cell");
    const closeBtnElement = modalElement?.querySelector(".close"); // Query within modal

    if (!modalElement) {
      console.error("Schedule Modal element not found.");
      return;
    }

    // Function to fetch course data by ID
    const getCourseById = async (id) => {
      return data.find(course => course.id === id);
    };

    const formatDateTime = (start, end) => {
      if (!start || !end) return "N/A";
      const startDate = new Date(start);
      const endDate = new Date(end);
      const formatTime = (date) => date.toLocaleTimeString("zh-TW", {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
      });
      return `${formatTime(startDate)} - ${formatTime(endDate)}`;
    };

    const openModal = async (courseId) => {
      const course = data.find(k => k.id === courseId);

      if (!course) console.error(`Unable to find ${courseId}`);

      displayModalContent(course);

      // Display modal with flex layout
      modalElement.style.display = "flex";
      modalElement.style.alignItems = "center";
      modalElement.style.justifyContent = "center";
      document.body.style.overflow = "hidden";
    };

    // Function to display modal content
    function displayModalContent(course) {
      console.log(course);
      if (!modalElement) return;

      const modalTitleEl = modalElement.querySelector("#modalTitle");
      const modalSubtitleEl = modalElement.querySelector("#modalSubtitle");
      const modalSpeakerEl = modalElement.querySelector("#modalSpeaker");
      const modalTimeEl = modalElement.querySelector("#modalTime");
      const modalTypeEl = modalElement.querySelector("#modalType");
      const modalDescriptionEl = modalElement.querySelector("#modalDescription");
      const linksContainerEl = modalElement.querySelector("#modalLinks");

      if (modalTitleEl) modalTitleEl.textContent = course.title_zh?.split("\n")[0] || "";
      if (modalSubtitleEl) modalSubtitleEl.textContent = course.title_zh?.split("\n")[1] || "";

      const speakerText = [course.speaker1, course.speaker2, course.speaker3, course.speaker4, course.speaker5].filter(Boolean).join(", ");
      if (modalSpeakerEl) modalSpeakerEl.textContent = speakerText ? `主講人：${speakerText}` : "主講人：N/A";

      if (modalTimeEl) modalTimeEl.textContent = formatDateTime(course.start, course.end);
      if (modalTypeEl) modalTypeEl.textContent = course.type || "N/A";

      // Always provide some content even if description is empty
      if (modalDescriptionEl) {
        modalDescriptionEl.innerHTML = course.description_zh?.replace(/\n/g, "<br>") || "暫無課程介紹";
      }

      // Handle speaker section
      const speakerSectionTitleEl = modalElement.querySelector("#speakerSectionTitle");
      const speakerDescriptionEl = modalElement.querySelector("#speakerDescription");

      // Update speaker section title with speaker name
      if (speakerSectionTitleEl && speakerText) {
        speakerSectionTitleEl.textContent = `講者介紹 - ${speakerText.replace("主講人：", "")}`;
      } else if (speakerSectionTitleEl) {
        speakerSectionTitleEl.textContent = "講者介紹";
      }

      // For now, use a placeholder for speaker description
      if (speakerDescriptionEl) {
        if (speakerText && speakerText !== "主講人：N/A") {
          speakerDescriptionEl.innerHTML = `${speakerText.replace("主講人：", "")}是本課程的講師。<br>更多講者資訊將在未來更新。`;
        } else {
          speakerDescriptionEl.innerHTML = "無講者資訊";
        }

        // Apply same styling as modalDescription
        speakerDescriptionEl.classList.add("description-text");
      }

      if (linksContainerEl) {
        linksContainerEl.innerHTML = ""; // Clear previous links
        // Simplified slide button
        if (course.slide) {
          const slideBtn = document.createElement("a");
          slideBtn.href = course.slide;
          slideBtn.target = "_blank";
          slideBtn.className = "modal-link modal-link-button";
          slideBtn.textContent = "課程簡報";
          linksContainerEl.appendChild(slideBtn);
        }

        // Simplified approach to create buttons
        if (course.co_write) {
          const coWriteBtn = document.createElement("a");
          coWriteBtn.href = course.co_write;
          coWriteBtn.target = "_blank";
          coWriteBtn.className = "modal-link";
          coWriteBtn.textContent = "共筆";
          linksContainerEl.appendChild(coWriteBtn);
        }

        if (course.record) {
          const recordBtn = document.createElement("a");
          recordBtn.href = course.record;
          recordBtn.target = "_blank";
          recordBtn.className = "modal-link";
          recordBtn.textContent = "錄影";
          linksContainerEl.appendChild(recordBtn);
        }
      }
    }

    // Close modal function
    const closeModal = () => {
      if (modalElement) {
        modalElement.style.display = "none";
        document.body.style.overflow = "";
      }
    };

    courseElements.forEach(element => {
      element.addEventListener("click", () => {
        const courseId = element.getAttribute("data-course-id");
        // Only open modal if courseId exists and is not "null"
        if (courseId && courseId !== "null") {
          openModal(courseId);
        }
      });
    });

    if (closeBtnElement) {
      closeBtnElement.addEventListener("click", closeModal);
    }

    // Close button at the bottom
    const closeButtonElement = modalElement.querySelector(".close-button");
    if (closeButtonElement) {
      closeButtonElement.addEventListener("click", closeModal);
    }

    // Click outside to close
    window.addEventListener("click", (event) => {
      if (event.target === modalElement) {
        closeModal();
      }
    });

    // ESC key to close
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && modalElement.style.display === "flex") {
        closeModal();
      }
    });
  });
</script>


