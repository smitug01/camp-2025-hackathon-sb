---
import { getLocale } from "../../i18n";
import {
  generateCourseId,
  isMealCourse,
  hasCourseDetails,
  calculateDurationInSlots,
  getCourseStartingAt,
  updateCellCoverage,
  getCourseCellClasses,
} from "../../utils/schedule";
import {
  TIME_SLOTS,
  DAY_DEFINITIONS,
} from "../../constants/schedule";
import type {
  CellCoverage,
  CoursesByDay,
  DayHeader,
  ScheduleData,
} from "../../types/schedule";
import CourseModal from "./CourseModal.astro";

const t = getLocale(Astro.url);

// Fetch schedule data dynamically from the API endpoint
let scheduleData: ScheduleData;
try {
  const response = await fetch(`${Astro.site?.origin || 'http://localhost:4321'}/2025/schedule.json`);
  if (!response.ok) {
    throw new Error(`Failed to fetch schedule: ${response.status}`);
  }
  scheduleData = await response.json();
} catch (error) {
  console.error('Error fetching schedule data:', error);
}

const dynamicDayHeaders: DayHeader[] = DAY_DEFINITIONS.map((day) => ({
  dayNum: day.displayNum,
  dateText: day.dateText,
}));

const timeSlots = TIME_SLOTS;

const coursesByDay: CoursesByDay = {};
DAY_DEFINITIONS.forEach((dayDef) => {
  coursesByDay[dayDef.id] = scheduleData.sessions.filter(
    (course) => course.room === dayDef.id,
  );
});

const cellCoverage: CellCoverage = {};
DAY_DEFINITIONS.forEach((dayDef) => {
  cellCoverage[dayDef.id] = {};
});
---

<section class="container" id="schedule">
  <h2 class="emfont-UnboundedSans">
    {t.components.home.schedulePreview.title}
  </h2>

  <div class="schedule-table">
    <div class="table-container emfont-NotoSansTC-700">
      <table>
        <thead>
          <tr>
            <th></th>
            {
              dynamicDayHeaders.map((header) => (
                <th>
                  <div class="day-header">Day {header.dayNum}</div>
                  <div class="date-header">{header.dateText}</div>
                </th>
              ))
            }
          </tr>
        </thead>
        <tbody>
          {
            timeSlots.map((timeSlot, timeIndex) => (
              <tr>
                <td class="time-cell">{timeSlot}</td>
                {DAY_DEFINITIONS.map((dayDef) => {
                  const dayKey = dayDef.id;
                  if (cellCoverage[dayKey]?.[timeSlot]) return null;

                  const course = getCourseStartingAt(
                    coursesByDay[dayKey],
                    timeSlot,
                  );
                  if (course) {
                    const rowspan = calculateDurationInSlots(course);
                    if (typeof rowspan === "number") {
                      updateCellCoverage(
                        cellCoverage,
                        dayKey,
                        timeIndex,
                        rowspan,
                        timeSlots,
                      );

                      if (isMealCourse(course)) {
                        return (
                          <td
                            class="event-break-cell"
                            rowspan={rowspan}
                          >
                            {course.zh.title}
                          </td>
                        );
                      }

                      const courseId = generateCourseId(
                        course,
                        timeSlot,
                      );
                      const courseHasDetails =
                        hasCourseDetails(course);
                      const cellClasses =
                        getCourseCellClasses(course);

                      return (
                        <td
                          class={cellClasses}
                          data-course-id={
                            courseHasDetails ? courseId : null
                          }
                          rowspan={rowspan}
                        >
                          <div class="course-title">
                            {course.zh.title?.split("\n")[0] || ""}
                          </div>
                          {course.zh.title?.split("\n")[1] && (
                            <div class="course-subtitle">
                              {course.zh.title.split("\n")[1]}
                            </div>
                          )}
                          {courseHasDetails && (
                            <div class="info-icon">
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="10"
                                height="10"
                                viewBox="0 0 20 20"
                                fill="none"
                              >
                                <path
                                  d="M9.89673 9.10425V13.3696"
                                  stroke="#201814"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M9.89673 5.70126L9.90604 5.69092"
                                  stroke="#201814"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M9.89665 18.0614C14.608 18.0614 18.4273 14.242 18.4273 9.53068C18.4273 4.81931 14.608 1 9.89665 1C5.18528 1 1.36597 4.81931 1.36597 9.53068C1.36597 14.242 5.18528 18.0614 9.89665 18.0614Z"
                                  stroke="#201814"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          )}
                        </td>
                      );
                    }
                  }
                  return <td class="empty-cell" />;
                })}
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>
  </div>
</section>

<CourseModal />

<style>
  .container {
    padding: 2rem 0;
    text-align: center;
    max-width: 1200px;
    margin: 0 auto;
  }

  .schedule-table {
    overflow-x: auto;
    margin: 2rem 0;
    padding: 1rem;
  }

  .table-container {
    min-width: 900px;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
    font-size: 1.25rem;
    table-layout: fixed;
  }

  th,
  td {
    border: 1px solid #ccc;
    padding: 0.5rem;
    text-align: center;
    overflow: hidden;
    text-overflow: ellipsis;
    box-sizing: border-box;
  }

  th:first-child,
  td:first-child {
    /* Time column */
    width: 80px;
    min-width: 80px;
    padding: 0.5rem 0.25rem;
  }

  th:not(:first-child),
  td:not(:first-child) {
    width: calc((100% - 80px) / 5);
    padding: 0.5rem;
  }

  thead th {
    background-color: #f0f0f0;
    position: sticky;
    top: 0;
    z-index: 2;
    font-weight: bold;
  }

  .day-header {
    font-size: 1.1rem;
    font-weight: bold;
    color: #201814;
  }

  .date-header {
    font-size: 0.85rem;
    color: #000;
  }

  .time-cell {
    font-weight: bold;
    background-color: #f0f0f0;
    position: sticky;
    left: 0;
    z-index: 5;
    color: #201814;
    vertical-align: middle;
    font-size: 0.9rem !important;
    white-space: nowrap;
    padding: 0.5rem 0.25rem;
  }

  .course-cell {
    background-color: #e9ecef;
    transition: all 0.2s ease-in-out;
    padding: 0.4rem;
    position: relative;
  }

  .course-cell[data-course-id]:not([data-course-id="null"]) {
    cursor: pointer;
  }

  .course-cell[data-course-id]:not([data-course-id="null"]):hover {
    background-color: #d8dcdf;
    transform: translateY(-2px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .course-cell.type-main,
  .course-cell.type-broad,
  .course-cell.type-hackathon,
  .course-cell.type-game,
  .course-cell.type-community,
  .course-cell.type-other,
  .course-cell.type-default {
    background-color: #e9ecef;
  }

  .course-title {
    font-weight: 600;
    /* font-size: max(1vw, 0.9rem); */
    font-size: 1rem;
    margin-bottom: 0.3rem;
    color: #222;
    font-family:
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      sans-serif;
  }

  .course-cell.type-main .course-title,
  .course-cell.type-broad .course-title,
  .course-cell.type-hackathon .course-title,
  .course-cell.type-game .course-title,
  .course-cell.type-community .course-title,
  .course-cell.type-other .course-title {
    color: #222;
  }

  .course-subtitle {
    font-size: max(0.85vw, 0.75rem);
    color: #333;
    margin-bottom: 0.3rem;
    font-family:
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      sans-serif;
  }

  .course-speaker {
    font-size: 0.75em;
    color: #555;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
    margin-top: 0.2rem;
  }

  .course-speaker .icon {
    width: 14px;
    height: 14px;
  }

  .info-icon {
    position: absolute;
    bottom: 15px;
    right: 3px;
    width: 10px;
    height: 10px;
  }

  .empty-cell {
    background-color: #ffffff;
  }

  .event-break-cell {
    background-color: #6c757d;
    color: white;
    font-weight: bold;
    vertical-align: middle;
    cursor: default;
  }

  /* Removed Modal specific styles as they are now in CourseModal.astro */

  @media (max-width: 900px) {
  }

  @media (max-width: 768px) {
    body {
      font-size: max(3.5vw, 1rem);
    }
    table {
      transform: translateX(-1rem);
    }
    th:first-child,
    td:first-child {
      width: 70px;
      min-width: 70px;
      padding: 0.5rem 0.15rem;
    }
    .time-cell {
      padding: 0.5rem 0.15rem;
      font-size: 0.9rem !important;
    }
    /* th:not(:first-child),
    td:not(:first-child) {
      width: calc((100% - 70px) / 5);
      font-size: max(0.9rem, 3vw);
    }
    td.course-cell {
      font-size: max(0.9rem, 3vw);
    }
    .course-cell .course-title {
      font-size: max(0.9rem, 3vw);
      margin-bottom: 0.2rem;
    }
    .course-cell .course-subtitle {
      font-size: max(0.75rem, 2.5vw);
      margin-bottom: 0.2rem;
    }
    .event-break-cell {
      font-size: max(0.9rem, 3vw);
    } */
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const courseCells = document.querySelectorAll(
      '.course-cell[data-course-id]:not([data-course-id="null"])',
    );

    courseCells.forEach((cell) => {
      cell.addEventListener("click", () => {
        const courseId = cell.getAttribute("data-course-id");
        if (courseId) {
          const event = new CustomEvent("openCourseModal", {
            detail: { courseId },
            bubbles: true, // Optional: if you need the event to bubble up
            composed: true, // Optional: if you need the event to cross shadow DOM boundaries
          });
          document.dispatchEvent(event);
        }
      });
    });
  });
</script>
