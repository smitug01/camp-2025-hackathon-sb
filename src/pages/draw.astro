---
import Layout from "../layouts/index.astro";
import { getLocale } from "../i18n";

const t = getLocale(Astro.url);
---

<Layout
  title="ÈªëÂÆ¢ÊùæÁ∞°Â†±ÊäΩÁ±§"
  description="ÈªëÂÆ¢ÊùæÁ∞°Â†±È†ÜÂ∫èÈö®Ê©üÊäΩÂèñ"
>
  <div class="draw-container emfont-NotoSansTC">
    <div class="header emfont-MaokenAssortedSansTC">
      <h1 class="emfont-UnboundedSans">ÈªëÂÆ¢ÊùæÁ∞°Â†±ÊäΩÁ±§</h1>
      <p>9 ÁµÑÈöä‰ºçÈö®Ê©üÈ†ÜÂ∫è ‚Ä¢ 2ÂàÜÈêòÊ∫ñÂÇô + 10ÂàÜÈêòÁ∞°Â†±</p>
    </div>

    <div class="draw-area">
      <div id="drawResult" class="draw-result">
        <div class="group-display">
          <span id="selectedGroup" class="emfont-NotoSansTC-700">Êåâ‰∏ãÊäΩÁ±§ÈñãÂßã</span>
        </div>
      </div>

      <div class="controls">
        <button id="drawBtn" class="draw-btn emfont-NotoSansTC-600">
          <span class="btn-text">ÊäΩÂèñ‰∏ã‰∏ÄÁµÑ</span>
          <span class="spinner hidden">üé≤</span>
        </button>
        
        <div class="timer-controls">
          <button id="prepBtn" class="timer-btn emfont-NotoSansTC-500" disabled>
            ÈñãÂßã2ÂàÜÈêòÊ∫ñÂÇô
          </button>
          <button id="presentBtn" class="timer-btn emfont-NotoSansTC-500" disabled>
            ÈñãÂßã10ÂàÜÈêòÁ∞°Â†±
          </button>
        </div>
      </div>

      <div id="timer" class="timer hidden emfont-NotoSansTC-600">
        <div class="timer-display">
          <div class="timer-type"></div>
          <div class="timer-time">00:00</div>
        </div>
        <div class="timer-progress">
          <div class="progress-bar"></div>
        </div>
      </div>

      <div class="groups-status">
        <h3 class="emfont-NotoSansTC-700">Èöä‰ºçÁãÄÊÖã</h3>
        <div id="groupsList" class="groups-list">
          <!-- Groups will be populated by JavaScript -->
        </div>
      </div>
    </div>

    <!-- Celebration Animation -->
    <div id="celebration" class="celebration hidden">
      <div class="firework"></div>
      <div class="firework"></div>
      <div class="firework"></div>
    </div>
  </div>
  <script src="../scripts/main.js"></script>
  <script src="../scripts/lava.js"></script>
</Layout>

<style>
  .draw-container {
    min-height: 100vh;
    padding: 2rem;
    padding-top: 7rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    overflow: hidden;
  }

  .header {
    text-align: center;
    margin-bottom: 3rem;
    z-index: 2;
  }

  .header h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  }

  .header p {
    font-size: 1.2rem;
    opacity: 0.9;
  }

  .draw-area {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 3rem;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
    max-width: 600px;
    width: 100%;
    text-align: center;
    color: #333;
    position: relative;
    z-index: 2;
  }

  .draw-result {
    margin-bottom: 2rem;
  }

  .group-display {
    background: linear-gradient(135deg, #009BEF, #0048da);
    color: white;
    padding: 2rem;
    border-radius: 15px;
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 1rem;
    min-height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
  }

  .group-display.animate {
    animation: pulse 0.5s ease-in-out;
  }

  .group-display.spinning {
    animation: roulette 3s ease-out;
  }

  .roulette-text {
    background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #667eea, #ff6b6b);
    background-size: 300% 300%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: rainbow 0.5s ease-in-out infinite;
  }

  .controls {
    margin-bottom: 2rem;
  }

  .draw-btn {
    background: linear-gradient(135deg, #ff6b6b, #ff8e53);
    color: white;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.3rem;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
    margin-bottom: 1rem;
    position: relative;
    overflow: hidden;
  }

  .draw-btn .spinner {
    display: inline-block;
    animation: spin 0.3s linear infinite;
    font-size: 1.5rem;
  }

  .draw-btn .spinner.hidden {
    display: none;
  }

  .draw-btn .btn-text.hidden {
    display: none;
  }

  .draw-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6);
  }

  .draw-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    box-shadow: none;
  }

  .timer-controls {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .timer-btn {
    background: linear-gradient(135deg, #4ecdc4, #44a08d);
    color: white;
    border: none;
    padding: 0.8rem 1.5rem;
    font-size: 1rem;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(78, 205, 196, 0.4);
  }

  .timer-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(78, 205, 196, 0.6);
  }

  .timer-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    box-shadow: none;
  }

  .timer {
    margin: 2rem 0;
    padding: 1.5rem;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 15px;
    color: white;
    transition: all 0.3s ease;
  }

  .timer.hidden {
    display: none;
  }

  .timer-display {
    text-align: center;
    margin-bottom: 1rem;
  }

  .timer-type {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
    opacity: 0.9;
  }

  .timer-time {
    font-size: 3rem;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  }

  .timer-progress {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 4px;
    overflow: hidden;
  }

  .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #4ecdc4, #44a08d);
    border-radius: 4px;
    transition: width 1s linear;
    width: 0%;
  }

  .groups-status {
    margin-top: 2rem;
  }

  .groups-status h3 {
    margin-bottom: 1rem;
    color: #333;
  }

  .groups-list {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
  }

  .group-item {
    padding: 0.5rem;
    border-radius: 8px;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .group-item.pending {
    background: #e3f2fd;
    color: #1976d2;
  }

  .group-item.current {
    background: linear-gradient(135deg, #ff6b6b, #ff8e53);
    color: white;
    animation: glow 2s ease-in-out infinite alternate;
  }

  .group-item.completed {
    background: #e8f5e8;
    color: #2e7d32;
  }

  .celebration {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 1000;
  }

  .celebration.hidden {
    display: none;
  }

  .firework {
    width: 4px;
    height: 4px;
    border-radius: 50%;
    position: absolute;
    animation: firework 1s ease-out forwards;
  }

  .firework:nth-child(1) {
    background: #ff6b6b;
    left: 20%;
    animation-delay: 0s;
  }

  .firework:nth-child(2) {
    background: #4ecdc4;
    left: 50%;
    animation-delay: 0.3s;
  }

  .firework:nth-child(3) {
    background: #667eea;
    left: 80%;
    animation-delay: 0.6s;
  }

  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  @keyframes roulette {
    0% { transform: scale(1); }
    25% { transform: scale(1.1) rotate(10deg); }
    50% { transform: scale(0.95) rotate(-5deg); }
    75% { transform: scale(1.05) rotate(3deg); }
    100% { transform: scale(1) rotate(0deg); }
  }

  @keyframes rainbow {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  @keyframes glow {
    0% { box-shadow: 0 0 5px rgba(255, 107, 107, 0.5); }
    100% { box-shadow: 0 0 20px rgba(255, 107, 107, 0.8); }
  }

  @keyframes firework {
    0% {
      transform: translateY(100vh) scale(0);
      opacity: 1;
    }
    50% {
      transform: translateY(50vh) scale(1);
      opacity: 1;
    }
    100% {
      transform: translateY(10vh) scale(0);
      opacity: 0;
    }
  }

  @media (max-width: 768px) {
    .draw-area {
      padding: 2rem 1.5rem;
      margin: 1rem;
    }

    .header h1 {
      font-size: 2rem;
    }

    .group-display {
      font-size: 2rem;
      padding: 1.5rem;
      min-height: 100px;
    }

    .timer-controls {
      flex-direction: column;
      align-items: center;
    }

    .groups-list {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
  class HackathonDraw {
    constructor() {
      this.groups = Array.from({length: 9}, (_, i) => ({
        id: i + 1,
        name: `Á¨¨ ${i + 1} ÁµÑ`,
        status: 'pending'
      }));
      
      this.availableGroups = [...this.groups];
      this.currentGroup = null;
      this.timer = null;
      this.timerDuration = 0;
      this.timerStartTime = 0;
      this.timerPausedTime = 0;
      this.timerPaused = false;
      this.currentTimerType = null;
      
      this.initializeElements();
      this.bindEvents();
      this.renderGroups();
      this.updateTimerButtons();
    }

    initializeElements() {
      this.drawBtn = document.getElementById('drawBtn');
      this.prepBtn = document.getElementById('prepBtn');
      this.presentBtn = document.getElementById('presentBtn');
      this.selectedGroup = document.getElementById('selectedGroup');
      this.timerElement = document.getElementById('timer');
      this.timerType = this.timerElement.querySelector('.timer-type');
      this.timerTime = this.timerElement.querySelector('.timer-time');
      this.progressBar = this.timerElement.querySelector('.progress-bar');
      this.groupsList = document.getElementById('groupsList');
      this.celebration = document.getElementById('celebration');
      this.pauseBtn = document.getElementById('pauseBtn');
      this.restartBtn = document.getElementById('restartBtn');
    }

    bindEvents() {
      if (this.drawBtn) {
        this.drawBtn.addEventListener('click', () => this.drawGroup());
      }
      if (this.prepBtn) {
        this.prepBtn.addEventListener('click', () => {
          console.log('Prep button clicked');
          this.startTimer('prep', 2 * 60);
        });
      }
      if (this.presentBtn) {
        this.presentBtn.addEventListener('click', () => {
          console.log('Present button clicked');
          this.startTimer('presentation', 10 * 60);
        });
      }
      if (this.pauseBtn) {
        this.pauseBtn.addEventListener('click', () => this.togglePause());
      }
      if (this.restartBtn) {
        this.restartBtn.addEventListener('click', () => this.restartTimer());
      }
    }

    drawGroup() {
      if (this.availableGroups.length === 0) {
        this.selectedGroup.textContent = 'ÊâÄÊúâÈöä‰ºçÂ∑≤ÊäΩÂÆåÔºÅ';
        this.drawBtn.disabled = true;
        this.showCelebration();
        return;
      }

      // Disable button and show spinner
      this.drawBtn.disabled = true;
      const btnText = this.drawBtn.querySelector('.btn-text');
      const spinner = this.drawBtn.querySelector('.spinner');
      btnText.classList.add('hidden');
      spinner.classList.remove('hidden');

      // Start the spinning animation
      const groupDisplay = document.querySelector('.group-display');
      groupDisplay.classList.add('spinning');
      
      // Show random cycling effect
      this.selectedGroup.classList.add('roulette-text');
      
      let cycleCount = 0;
      const maxCycles = 20;
      const cycleInterval = setInterval(() => {
        const randomGroup = this.availableGroups[Math.floor(Math.random() * this.availableGroups.length)];
        this.selectedGroup.textContent = randomGroup.name;
        cycleCount++;
        
        if (cycleCount >= maxCycles) {
          clearInterval(cycleInterval);
          
          // Final selection
          const randomIndex = Math.floor(Math.random() * this.availableGroups.length);
          const selectedGroup = this.availableGroups[randomIndex];
          
          // Update current group
          if (this.currentGroup) {
            this.currentGroup.status = 'completed';
          }
          
          this.currentGroup = selectedGroup;
          this.currentGroup.status = 'current';
          
          // Remove from available groups
          this.availableGroups.splice(randomIndex, 1);
          
          // Final reveal with dramatic effect
          setTimeout(() => {
            this.selectedGroup.textContent = selectedGroup.name;
            this.selectedGroup.classList.remove('roulette-text');
            groupDisplay.classList.remove('spinning');
            groupDisplay.classList.add('animate');
            
            // Re-enable button
            this.drawBtn.disabled = false;
            btnText.classList.remove('hidden');
            spinner.classList.add('hidden');
            
            // Enable timer buttons
            this.prepBtn.disabled = false;
            this.presentBtn.disabled = true;
            
            // Update groups display
            this.renderGroups();
            
            // Show celebration animation
            this.showCelebration();
            
            setTimeout(() => {
              groupDisplay.classList.remove('animate');
            }, 500);
          }, 500);
        }
      }, 100);
    }

    startTimer(type, seconds) {
      console.log(`Starting timer: ${type}, ${seconds} seconds`);
      this.stopTimer();
      
      const typeText = type === 'prep' ? 'Ê∫ñÂÇôÊôÇÈñì' : 'Á∞°Â†±ÊôÇÈñì';
      if (this.timerType) {
        this.timerType.textContent = typeText;
      }
      this.timerDuration = seconds;
      this.timerStartTime = Date.now();
      this.timerPausedTime = 0;
      this.timerPaused = false;
      this.currentTimerType = type;
      
      if (this.timerElement) {
        this.timerElement.classList.remove('hidden');
      }
      this.updateTimerDisplay();
      this.updateTimerButtons();
      
      // Update button states
      if (type === 'prep') {
        if (this.prepBtn) this.prepBtn.disabled = true;
        if (this.presentBtn) this.presentBtn.disabled = false;
      } else {
        if (this.presentBtn) this.presentBtn.disabled = true;
      }
      
      this.timer = setInterval(() => {
        if (!this.timerPaused) {
          this.updateTimerDisplay();
        }
      }, 100);
      
      console.log('Timer started successfully');
    }

    updateTimerDisplay() {
      const currentTime = Date.now();
      const elapsed = Math.floor((currentTime - this.timerStartTime - this.timerPausedTime) / 1000);
      const remaining = Math.max(0, this.timerDuration - elapsed);
      
      const minutes = Math.floor(remaining / 60);
      const seconds = remaining % 60;
      
      this.timerTime.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      
      const progress = Math.min(100, (elapsed / this.timerDuration) * 100);
      this.progressBar.style.width = `${progress}%`;
      
      if (remaining === 0 && !this.timerPaused) {
        this.stopTimer();
        this.timerFinished();
      }
    }

    stopTimer() {
      if (this.timer) {
        clearInterval(this.timer);
        this.timer = null;
      }
      this.timerPaused = false;
      this.updateTimerButtons();
    }

    togglePause() {
      if (this.timerPaused) {
        // Resume timer
        this.timerPausedTime += Date.now() - this.pauseStartTime;
        this.timerPaused = false;
      } else {
        // Pause timer
        this.pauseStartTime = Date.now();
        this.timerPaused = true;
      }
      this.updateTimerButtons();
    }

    restartTimer() {
      if (this.currentTimerType) {
        const duration = this.currentTimerType === 'prep' ? 2 * 60 : 10 * 60;
        this.startTimer(this.currentTimerType, duration);
      }
    }

    updateTimerButtons() {
      if (this.pauseBtn && this.restartBtn) {
        if (this.timer) {
          this.pauseBtn.disabled = false;
          this.restartBtn.disabled = false;
          this.pauseBtn.textContent = this.timerPaused ? 'ÁπºÁ∫å' : 'Êö´ÂÅú';
        } else {
          this.pauseBtn.disabled = true;
          this.restartBtn.disabled = true;
          this.pauseBtn.textContent = 'Êö´ÂÅú';
        }
      }
    }

    timerFinished() {
      // Flash the timer
      this.timerElement.style.animation = 'pulse 0.5s ease-in-out 3';
      
      // Reset timer state
      this.currentTimerType = null;
      this.updateTimerButtons();
      
      // Play sound notification (if browser allows)
      try {
        const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaA=');
        audio.play();
      } catch (e) {
        // Fallback: vibrate if available
        if (navigator.vibrate) {
          navigator.vibrate([200, 100, 200]);
        }
      }
      
      setTimeout(() => {
        this.timerElement.style.animation = '';
      }, 1500);
    }

    showCelebration() {
      this.celebration.classList.remove('hidden');
      setTimeout(() => {
        this.celebration.classList.add('hidden');
      }, 2000);
    }

    renderGroups() {
      this.groupsList.innerHTML = '';
      
      this.groups.forEach(group => {
        const groupElement = document.createElement('div');
        groupElement.className = `group-item ${group.status}`;
        groupElement.textContent = group.name;
        this.groupsList.appendChild(groupElement);
      });
    }
  }

  // Initialize the draw system when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    new HackathonDraw();
  });
</script>