---
import Layout from "../layouts/index.astro";
import { getLocale } from "../i18n";

const t = getLocale(Astro.url);
---

<Layout
  title={t.components.draw.title}
  description={t.components.draw.subtitle}
>
  <div class="draw-container emfont-NotoSansTC">
    <div class="header emfont-MaokenAssortedSansTC">
      <h1 class="emfont-UnboundedSans">{t.components.draw.title}</h1>
      <p>{t.components.draw.subtitle}</p>
    </div>

    <div class="draw-area">
      <div id="drawResult" class="draw-result">
        <div class="group-display">
          <span id="selectedGroup" class="emfont-NotoSansTC-700"
            >{t.components.draw.startText}</span
          >
        </div>
      </div>

      <div class="controls">
        <button id="drawBtn" class="draw-btn emfont-NotoSansTC-600">
          <span class="btn-text">{t.components.draw.drawNext}</span>
          <span class="spinner hidden">ðŸŽ²</span>
        </button>

        <div class="timer-controls">
          <button
            id="prepBtn"
            class="timer-btn emfont-NotoSansTC-500"
            disabled
          >
            {t.components.draw.timer.prep}
          </button>
          <button
            id="presentBtn"
            class="timer-btn emfont-NotoSansTC-500"
            disabled
          >
            {t.components.draw.timer.presentation}
          </button>
          <div class="timer-action-controls">
            <button
              id="pauseBtn"
              class="timer-action-btn emfont-NotoSansTC-500"
              disabled
            >
              {t.components.draw.timer.pause}
            </button>
            <button
              id="restartBtn"
              class="timer-action-btn emfont-NotoSansTC-500"
              disabled
            >
              {t.components.draw.timer.restart}
            </button>
          </div>
        </div>
      </div>

      <div id="timer" class="timer hidden emfont-NotoSansTC-600">
        <div class="timer-display">
          <div class="timer-type"></div>
          <div class="timer-time">00:00</div>
        </div>
        <div class="timer-progress">
          <div class="progress-bar"></div>
        </div>
      </div>

      <div class="groups-status">
        <h3 class="emfont-NotoSansTC-700">
          {t.components.draw.groupStatus}
        </h3>
        <div id="groupsList" class="groups-list">
          <!-- Groups will be populated by JavaScript -->
        </div>
      </div>
    </div>

    <!-- Celebration Animation -->
    <div id="celebration" class="celebration hidden">
      <div class="firework"></div>
      <div class="firework"></div>
      <div class="firework"></div>
    </div>
  </div>

  <script define:vars={{ t }}>
    // Make translations available to the draw script
    window.drawTranslations = t;
  </script>
  <script src="../scripts/main.js"></script>
  <script src="../scripts/lava.js"></script>
</Layout>

<style>
  .draw-container {
    min-height: 100vh;
    padding: 2rem;
    padding-top: 7rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    overflow: hidden;
  }

  .header {
    text-align: center;
    margin-bottom: 3rem;
    z-index: 2;
  }

  .header h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  }

  .header p {
    font-size: 1.2rem;
    opacity: 0.9;
  }

  .draw-area {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 3rem;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
    max-width: 600px;
    width: 100%;
    text-align: center;
    color: #333;
    position: relative;
    z-index: 2;
  }

  .draw-result {
    margin-bottom: 2rem;
  }

  .group-display {
    background: linear-gradient(135deg, #009bef, #0048da);
    color: white;
    padding: 2rem;
    border-radius: 15px;
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 1rem;
    min-height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    transition:
      all 0.5s cubic-bezier(0.4, 0, 0.2, 1),
      transform 0.3s ease,
      background 0.4s ease,
      box-shadow 0.3s ease;
  }

  .group-display.animate {
    animation: pulse 0.5s ease-in-out;
  }

  .group-display.spinning {
    animation: roulette 3s ease-out;
    position: relative;
    overflow: visible;
  }

  .group-display.spinning::before {
    content: "";
    position: absolute;
    top: -10px;
    left: -10px;
    right: -10px;
    bottom: -10px;
    background: linear-gradient(
      45deg,
      #ff6b6b,
      #4ecdc4,
      #667eea,
      #ff6b6b
    );
    background-size: 400% 400%;
    border-radius: 20px;
    z-index: -1;
    animation: rainbow 0.5s ease-in-out infinite;
    filter: blur(5px);
  }

  .group-display.spinning::after {
    content: "âœ¨";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 3rem;
    opacity: 0.7;
    animation: spin 1s linear infinite;
  }

  .roulette-text {
    background: linear-gradient(
      45deg,
      #ff6b6b,
      #4ecdc4,
      #667eea,
      #00fff0,
      #ff6b6b
    );
    background-size: 400% 400%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation:
      rainbow 0.3s ease-in-out infinite,
      neon-glow 1s ease-in-out infinite;
    position: relative;
  }

  .roulette-text::before {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      45deg,
      #ff6b6b,
      #4ecdc4,
      #667eea,
      #00fff0
    );
    background-size: 400% 400%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: rainbow 0.3s ease-in-out infinite reverse;
    opacity: 0.5;
    transform: scale(1.05);
    filter: blur(1px);
  }

  .controls {
    margin-bottom: 2rem;
  }

  .draw-btn {
    background: linear-gradient(135deg, #ff6b6b, #ff8e53);
    color: white;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.3rem;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
    margin-bottom: 1rem;
    position: relative;
    overflow: hidden;
  }

  .draw-btn .spinner {
    display: inline-block;
    animation: spin 0.3s linear infinite;
    font-size: 1.5rem;
  }

  .draw-btn .spinner.hidden {
    display: none;
  }

  .draw-btn .btn-text.hidden {
    display: none;
  }

  .draw-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6);
  }

  .draw-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    box-shadow: none;
  }

  .timer-controls {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .timer-btn {
    background: linear-gradient(135deg, #4ecdc4, #44a08d);
    color: white;
    border: none;
    padding: 0.8rem 1.5rem;
    font-size: 1rem;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(78, 205, 196, 0.4);
  }

  .timer-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(78, 205, 196, 0.6);
  }

  .timer-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    box-shadow: none;
  }

  .timer-action-controls {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    margin-top: 1rem;
    opacity: 1;
    transition: opacity 0.3s ease;
  }

  .timer-action-btn {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    padding: 0.6rem 1.2rem;
    font-size: 0.9rem;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 3px 10px rgba(102, 126, 234, 0.3);
    min-width: 80px;
  }

  .timer-action-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.5);
  }

  .timer-action-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    box-shadow: none;
  }

  .timer {
    margin: 2rem 0;
    padding: 1.5rem;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 15px;
    color: white;
    transition: all 0.3s ease;
  }

  .timer.hidden {
    display: none;
  }

  .timer-display {
    text-align: center;
    margin-bottom: 1rem;
  }

  .timer-type {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
    opacity: 0.9;
  }

  .timer-time {
    font-size: 3rem;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  }

  .timer-progress {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 4px;
    overflow: hidden;
  }

  .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #4ecdc4, #44a08d);
    border-radius: 4px;
    transition: width 1s linear;
    width: 0%;
  }

  .groups-status {
    margin-top: 2rem;
  }

  .groups-status h3 {
    margin-bottom: 1rem;
    color: #333;
  }

  .groups-list {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
  }

  .group-item {
    padding: 0.5rem;
    border-radius: 8px;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .group-item.pending {
    background: #e3f2fd;
    color: #1976d2;
  }

  .group-item.current {
    background: linear-gradient(135deg, #ff6b6b, #ff8e53);
    color: white;
    animation: glow 2s ease-in-out infinite alternate;
  }

  .group-item.completed {
    background: #e8f5e8 !important;
    color: #2e7d32 !important;
    text-decoration: line-through !important;
    opacity: 0.7 !important;
  }

  .celebration {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 1000;
    overflow: hidden;
  }

  .celebration::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
      circle at center,
      rgba(255, 255, 255, 0.1) 0%,
      transparent 70%
    );
    animation: pulse 2s ease-in-out infinite;
  }

  .celebration.hidden {
    display: none;
  }

  .firework {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    position: absolute;
    animation: firework 1.5s ease-out forwards;
  }

  .firework::before {
    content: "";
    position: absolute;
    width: 2px;
    height: 2px;
    background: inherit;
    border-radius: 50%;
    top: -10px;
    left: -5px;
    animation: particle-burst 1s ease-out forwards;
    animation-delay: 0.5s;
  }

  .firework::after {
    content: "";
    position: absolute;
    width: 2px;
    height: 2px;
    background: inherit;
    border-radius: 50%;
    top: 10px;
    right: -5px;
    animation: particle-burst 1s ease-out forwards;
    animation-delay: 0.7s;
  }

  .firework:nth-child(1) {
    background: #ff6b6b;
    left: 20%;
    animation-delay: 0s;
  }

  .firework:nth-child(2) {
    background: #4ecdc4;
    left: 50%;
    animation-delay: 0.3s;
  }

  .firework:nth-child(3) {
    background: #667eea;
    left: 80%;
    animation-delay: 0.6s;
  }

  @keyframes pulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes roulette {
    0% {
      transform: scale(1) rotate(0deg);
      filter: hue-rotate(0deg);
    }
    10% {
      transform: scale(1.15) rotate(18deg);
      filter: hue-rotate(36deg);
    }
    20% {
      transform: scale(0.9) rotate(-12deg);
      filter: hue-rotate(72deg);
    }
    30% {
      transform: scale(1.2) rotate(25deg);
      filter: hue-rotate(108deg);
    }
    40% {
      transform: scale(0.85) rotate(-20deg);
      filter: hue-rotate(144deg);
    }
    50% {
      transform: scale(1.25) rotate(30deg);
      filter: hue-rotate(180deg);
    }
    60% {
      transform: scale(0.8) rotate(-25deg);
      filter: hue-rotate(216deg);
    }
    70% {
      transform: scale(1.3) rotate(35deg);
      filter: hue-rotate(252deg);
    }
    80% {
      transform: scale(0.9) rotate(-15deg);
      filter: hue-rotate(288deg);
    }
    90% {
      transform: scale(1.1) rotate(10deg);
      filter: hue-rotate(324deg);
    }
    100% {
      transform: scale(1) rotate(0deg);
      filter: hue-rotate(360deg);
    }
  }

  @keyframes rainbow {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  @keyframes glow {
    0% {
      box-shadow: 0 0 5px rgba(255, 107, 107, 0.5);
    }
    100% {
      box-shadow: 0 0 20px rgba(255, 107, 107, 0.8);
    }
  }

  @keyframes firework {
    0% {
      transform: translateY(100vh) scale(0) rotate(0deg);
      opacity: 1;
      border-radius: 50%;
      box-shadow: 0 0 0 0 currentColor;
    }
    30% {
      transform: translateY(60vh) scale(1.5) rotate(180deg);
      opacity: 1;
      box-shadow: 0 0 20px 5px currentColor;
    }
    60% {
      transform: translateY(30vh) scale(2) rotate(360deg);
      opacity: 0.8;
      border-radius: 30%;
      box-shadow:
        0 0 40px 10px currentColor,
        0 0 60px 20px rgba(255, 255, 255, 0.5);
    }
    100% {
      transform: translateY(10vh) scale(0) rotate(540deg);
      opacity: 0;
      border-radius: 0%;
      box-shadow:
        0 0 80px 30px currentColor,
        0 0 120px 50px rgba(255, 255, 255, 0.3);
    }
  }

  @keyframes particle-burst {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 1;
    }
    50% {
      transform: scale(1.2) rotate(180deg);
      opacity: 0.8;
    }
    100% {
      transform: scale(0) rotate(360deg);
      opacity: 0;
    }
  }

  @keyframes neon-glow {
    0%,
    100% {
      text-shadow:
        0 0 5px currentColor,
        0 0 10px currentColor,
        0 0 15px currentColor,
        0 0 20px #00fff0;
    }
    50% {
      text-shadow:
        0 0 10px currentColor,
        0 0 20px currentColor,
        0 0 30px currentColor,
        0 0 40px #00fff0,
        0 0 50px #00fff0;
    }
  }

  @keyframes matrix-rain {
    0% {
      transform: translateY(-100vh);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      transform: translateY(100vh);
      opacity: 0;
    }
  }

  @media (max-width: 768px) {
    .draw-area {
      padding: 2rem 1.5rem;
      margin: 1rem;
    }

    .header h1 {
      font-size: 2rem;
    }

    .group-display {
      font-size: 2rem;
      padding: 1.5rem;
      min-height: 100px;
    }

    .timer-controls {
      flex-direction: column;
      align-items: center;
    }

    .groups-list {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
  class HackathonDraw {
    constructor() {
      // Get i18n translations
      this.t = window.drawTranslations;

      this.groups = Array.from({ length: 9 }, (_, i) => ({
        id: i + 1,
        name: `ç¬¬ ${i + 1} çµ„`,
        status: "pending",
      }));

      this.availableGroups = [...this.groups];
      this.currentGroup = null;
      this.timer = null;
      this.timerDuration = 0;
      this.timerStartTime = 0;
      this.timerPausedTime = 0;
      this.timerPaused = false;
      this.currentTimerType = null;

      this.initializeElements();
      this.bindEvents();
      this.renderGroups();
      this.updateTimerButtons();
    }

    initializeElements() {
      this.drawBtn = document.getElementById("drawBtn");
      this.prepBtn = document.getElementById("prepBtn");
      this.presentBtn = document.getElementById("presentBtn");
      this.selectedGroup = document.getElementById("selectedGroup");
      this.timerElement = document.getElementById("timer");
      this.timerType = this.timerElement.querySelector(".timer-type");
      this.timerTime = this.timerElement.querySelector(".timer-time");
      this.progressBar =
        this.timerElement.querySelector(".progress-bar");
      this.groupsList = document.getElementById("groupsList");
      this.celebration = document.getElementById("celebration");
      this.pauseBtn = document.getElementById("pauseBtn");
      this.restartBtn = document.getElementById("restartBtn");
    }

    getGroupName(number) {
      return this.t.components.draw.groups.group.replace(
        "{{number}}",
        number,
      );
    }

    bindEvents() {
      if (this.drawBtn) {
        this.drawBtn.addEventListener("click", () =>
          this.drawGroup(),
        );
      }
      if (this.prepBtn) {
        this.prepBtn.addEventListener("click", () => {
          this.startTimer("prep", 2 * 60);
        });
      }
      if (this.presentBtn) {
        this.presentBtn.addEventListener("click", () => {
          this.startTimer("presentation", 10 * 60);
        });
      }
      if (this.pauseBtn) {
        this.pauseBtn.addEventListener("click", () =>
          this.togglePause(),
        );
      }
      if (this.restartBtn) {
        this.restartBtn.addEventListener("click", () =>
          this.restartTimer(),
        );
      }
    }

    drawGroup() {
      if (this.availableGroups.length === 0) {
        this.selectedGroup.textContent =
          this.t.components.draw.allDone;
        this.drawBtn.disabled = true;
        this.showCelebration();
        return;
      }

      // Disable button and show spinner
      this.drawBtn.disabled = true;
      const btnText = this.drawBtn.querySelector(".btn-text");
      const spinner = this.drawBtn.querySelector(".spinner");
      btnText.classList.add("hidden");
      spinner.classList.remove("hidden");

      // Start the spinning animation
      const groupDisplay = document.querySelector(".group-display");
      groupDisplay.classList.add("spinning");

      // Show random cycling effect
      this.selectedGroup.classList.add("roulette-text");
      this.selectedGroup.setAttribute(
        "data-text",
        this.selectedGroup.textContent,
      );

      let cycleCount = 0;
      const maxCycles = 20;
      const cycleInterval = setInterval(() => {
        const randomGroup =
          this.availableGroups[
            Math.floor(Math.random() * this.availableGroups.length)
          ];
        this.selectedGroup.textContent = randomGroup.name;
        cycleCount++;

        if (cycleCount >= maxCycles) {
          clearInterval(cycleInterval);

          // Final selection
          const randomIndex = Math.floor(
            Math.random() * this.availableGroups.length,
          );
          const selectedGroup = this.availableGroups[randomIndex];

          // Update current group
          if (this.currentGroup) {
            this.currentGroup.status = "completed";
          }

          this.currentGroup = selectedGroup;
          this.currentGroup.status = "current";

          // Remove from available groups
          this.availableGroups.splice(randomIndex, 1);

          // Final reveal with dramatic effect
          setTimeout(() => {
            // Smooth transition to final result
            this.selectedGroup.style.transition =
              "all 0.5s cubic-bezier(0.4, 0, 0.2, 1)";
            this.selectedGroup.textContent = selectedGroup.name;
            this.selectedGroup.setAttribute(
              "data-text",
              selectedGroup.name,
            );
            this.selectedGroup.classList.remove("roulette-text");
            groupDisplay.classList.remove("spinning");
            groupDisplay.classList.add("animate");

            // Add scale and glow effect for final reveal
            setTimeout(() => {
              groupDisplay.style.transform = "scale(1.1)";
              groupDisplay.style.boxShadow =
                "0 0 30px rgba(0, 155, 239, 0.6)";
            }, 100);

            setTimeout(() => {
              groupDisplay.style.transform = "scale(1)";
              groupDisplay.style.boxShadow = "none";
            }, 400);

            // Re-enable button
            this.drawBtn.disabled = false;
            btnText.classList.remove("hidden");
            spinner.classList.add("hidden");

            // Enable timer buttons
            this.prepBtn.disabled = false;
            this.presentBtn.disabled = true;

            // Update groups display
            this.renderGroups();

            // Show celebration animation
            this.showCelebration();

            setTimeout(() => {
              groupDisplay.classList.remove("animate");
              this.selectedGroup.style.transition = "";
              groupDisplay.style.transform = "";
              groupDisplay.style.boxShadow = "";
            }, 800);
          }, 500);
        }
      }, 100);
    }

    startTimer(type, seconds) {
      this.stopTimer();

      const typeText =
        type === "prep"
          ? this.t.components.draw.timer.prepTime
          : this.t.components.draw.timer.presentTime;
      if (this.timerType) {
        this.timerType.textContent = typeText;
      }
      this.timerDuration = seconds;
      this.timerStartTime = Date.now();
      this.timerPausedTime = 0;
      this.timerPaused = false;
      this.currentTimerType = type;

      if (this.timerElement) {
        this.timerElement.classList.remove("hidden");
      }
      this.updateTimerDisplay();
      this.updateTimerButtons();

      // Update button states
      if (type === "prep") {
        if (this.prepBtn) this.prepBtn.disabled = true;
        if (this.presentBtn) this.presentBtn.disabled = false;
      } else {
        if (this.presentBtn) this.presentBtn.disabled = true;
      }

      this.timer = setInterval(() => {
        if (!this.timerPaused) {
          this.updateTimerDisplay();
        }
      }, 100);

      // Ensure timer buttons are enabled after timer starts
      this.updateTimerButtons();
    }

    updateTimerDisplay() {
      const currentTime = Date.now();
      const elapsed = Math.floor(
        (currentTime - this.timerStartTime - this.timerPausedTime) /
          1000,
      );
      const remaining = Math.max(0, this.timerDuration - elapsed);

      const minutes = Math.floor(remaining / 60);
      const seconds = remaining % 60;

      this.timerTime.textContent = `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

      const progress = Math.min(
        100,
        (elapsed / this.timerDuration) * 100,
      );
      this.progressBar.style.width = `${progress}%`;

      if (remaining === 0 && !this.timerPaused) {
        this.stopTimer();
        this.timerFinished();
      }
    }

    stopTimer() {
      if (this.timer) {
        clearInterval(this.timer);
        this.timer = null;
      }
      this.timerPaused = false;
      this.updateTimerButtons();
    }

    togglePause() {
      if (this.timerPaused) {
        // Resume timer
        this.timerPausedTime += Date.now() - this.pauseStartTime;
        this.timerPaused = false;
      } else {
        // Pause timer
        this.pauseStartTime = Date.now();
        this.timerPaused = true;
      }
      this.updateTimerButtons();
    }

    restartTimer() {
      if (this.currentTimerType) {
        const duration =
          this.currentTimerType === "prep" ? 2 * 60 : 10 * 60;
        this.startTimer(this.currentTimerType, duration);
      }
    }

    updateTimerButtons() {
      if (this.pauseBtn && this.restartBtn) {
        if (this.timer) {
          this.pauseBtn.disabled = false;
          this.restartBtn.disabled = false;
          this.pauseBtn.textContent = this.timerPaused
            ? this.t.components.draw.timer.resume
            : this.t.components.draw.timer.pause;
        } else {
          this.pauseBtn.disabled = true;
          this.restartBtn.disabled = true;
          this.pauseBtn.textContent =
            this.t.components.draw.timer.pause;
        }
      }
    }

    timerFinished() {
      // Mark team as completed if presentation timer finished
      if (
        this.currentTimerType === "presentation" &&
        this.currentGroup
      ) {
        this.currentGroup.status = "completed";
        this.renderGroups();
      }

      // Flash the timer
      this.timerElement.style.animation = "pulse 0.5s ease-in-out 3";

      // Reset timer state
      this.currentTimerType = null;
      this.updateTimerButtons();

      // Play sound notification (if browser allows)
      try {
        const audio = new Audio(
          "data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaAjiR1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaA=",
        );
        audio.play();
      } catch (e) {
        // Fallback: vibrate if available
        if (navigator.vibrate) {
          navigator.vibrate([200, 100, 200]);
        }
      }

      setTimeout(() => {
        this.timerElement.style.animation = "";
      }, 1500);
    }

    showCelebration() {
      this.celebration.classList.remove("hidden");
      setTimeout(() => {
        this.celebration.classList.add("hidden");
      }, 2000);
    }

    renderGroups() {
      this.groupsList.innerHTML = "";

      this.groups.forEach((group) => {
        const groupElement = document.createElement("div");
        groupElement.className = `group-item ${group.status}`;
        groupElement.textContent = group.name;
        this.groupsList.appendChild(groupElement);
      });
    }
  }

  // Initialize the draw system when the page loads
  document.addEventListener("DOMContentLoaded", () => {
    new HackathonDraw();
  });
</script>
